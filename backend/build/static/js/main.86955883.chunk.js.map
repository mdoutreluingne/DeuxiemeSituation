{"version":3,"sources":["modele/Dbal.js","metier/Client.js","metier/Transaction.js","modele/DaoTransaction.js","modele/DaoUtilisateur.js","modele/DaoClient.js","metier/Ville.js","modele/DaoVille.js","components/InfosClient.js","components/DetailsTransaction.js","metier/Salle.js","modele/DaoSalle.js","metier/Reservation.js","modele/DaoReservation.js","metier/Obstacle.js","modele/DaoObstacle.js","metier/Theme.js","modele/DaoTheme.js","components/Transactions.js","components/Credits.js","components/Page.js","App.js","index.js"],"names":["Dbal","instance","this","ip","readIp","token","load","require","bdd","username","window","prompt","mdp","post","url","JSON","parse","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","setRequestHeader","send","params","objet","a","undefined","stringify","date","val","toLocaleDateString","year","month","day","split","client","infos","id","nom","prenom","ville","tel","mail","solde","archive","Transaction","Date","montant","type","numero","commentaire","reservation","DaoTransaction","dbal","liste","get","reponse","forEach","t","push","aujourdhui","date2amd","transaction","parseFloat","DaoUtilisateur","login","substr","toLowerCase","DaoClient","clients","c","valeur","put","lastId","getById","initialiser","addUser","Ville","DaoVille","v","InfosClient","props","state","update","daoClient","listeClients","listeVilles","setState","propriete","event","target","value","length","document","body","style","cursor","getVilleByNom","villes","onChange","self","nativeEvent","data","Array","from","list","children","option","loadClient","dataset","result","archiver","modifier","alert","creer","className","onClick","bind","reset","disabled","selectClient","map","index","key","data-client","change","afficherActions","React","Component","DetailsTransaction","initialized","reservationDetailee","resaDetail","then","rd","arrivee","Intl","DateTimeFormat","hour","minute","format","nbJoueur","o","i","qte","libelle","prix","Salle","heureOuverture","heureFermeture","theme","DaoSalle","salle","Reservation","DaoReservation","Obstacle","position","article","DaoObstacle","obstacle","response","obstacles","Theme","DaoTheme","Transactions","transactions","details","lastDetails","getReservationByTransaction","getSalleByReservation","getObstacleByReservation","getThemeBySalle","reservationDetaille","loadReservation","updateTransaction","options","weekday","selected","toUpperCase","afficherDetails","Credits","zone","ajouter","onAdd","console","log","updateClient","min","Page","liste_clients","getAll","getAllByClientId","changeClient","afficherDonnees","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.86955883.chunk.js","sourcesContent":["export default class Dbal {\r\n    /**\r\n     * Singleton\r\n     * @returns {Dbal}\r\n     */\r\n    constructor() {\r\n        if (!!Dbal.instance) {\r\n            return Dbal.instance;\r\n        }\r\n        /**@type Dbal**/\r\n        Dbal.instance = this;\r\n        /**@type string**/\r\n        this.ip = this.readIp();\r\n        /**@type Promise<string>**/\r\n        this.token = this.load();\r\n        return this;\r\n    }\r\n\r\n\r\n    readIp(){\r\n        const config = require('../config.json');\r\n        return config.bdd;\r\n    }\r\n\r\n    /**\r\n     * Récupère le token d'authorisation pour accéder à l'API\r\n     * @returns {Promise<string>}\r\n     */\r\n    async load(){\r\n        const username = window.prompt(\"username : \");\r\n        const mdp = window.prompt(\"mot de passe : \");\r\n        return await this.post(\"/api/login_check\", {\"username\": username,\"password\":mdp});\r\n    }\r\n\r\n    /**\r\n     * Métode get\r\n     * @param url {string}\r\n     * @returns {Promise<string>}\r\n     */\r\n    async get(url){\r\n        url = \"http://\" + this.ip + url;\r\n        let token = await this.token;\r\n        token = JSON.parse(token).token;\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('GET', url, true);\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            xhr.send()\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Méthode put\r\n     * @param url {string}\r\n     * @param params {string||object}\r\n     * @returns {Promise<string>}\r\n     */\r\n    async put(url, params){\r\n        url = \"http://\" + this.ip + url;\r\n        let token = await this.token;\r\n        token = JSON.parse(token).token;\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('PUT', url, true);\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            xhr.send(params)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Méthode post\r\n     * @param url {string}\r\n     * @param objet {string}\r\n     * @returns {Promise<string>}\r\n     */\r\n    post(url, objet){\r\n        url = \"http://\" + this.ip + url;\r\n        return new Promise(async (resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 201 || xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('POST', url, true);\r\n            if (this.token !== undefined){\r\n                let token = await this.token;\r\n                token = JSON.parse(token).token;\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            }\r\n            if (objet){\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n                if (typeof objet === \"object\"){xhr.send(JSON.stringify(objet))}\r\n                else {xhr.send(objet)}\r\n            }\r\n            else {xhr.send()}\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Transforme une date au format YYYY-MM-DD\r\n     * @param date\r\n     * @returns {string}\r\n     */\r\n    date2amd(date){\r\n        const options = {year: 'numeric', month: 'numeric', day: 'numeric' };\r\n        date = date.toLocaleDateString('fr-FR', options);\r\n        const val = date.split(\"/\");\r\n        date = val[2] + \"-\" + val[1] + \"-\" + val[0];\r\n        return date;\r\n    }\r\n}\r\n\r\n//============== A R CH I V E S ==================\r\n/**\r\n *fetch(\"http://localhost:8080/api/clients\")\r\n    .then(res => res.json())\r\n    .then(\r\n        async (result) => {\r\n        const create = result.map((c)=> {\r\n        clients.push(new client(c));\r\n        });\r\n        return await Promise.all(create);\r\n    },\r\n    (error) => {console.log(error);}\r\n );\r\n **/","/**\r\n * Definition d'un client\r\n */\r\nexport default class client{\r\n    constructor(infos) {\r\n        /**@type {number}**/\r\n        this.id = (infos)?infos.id:0;\r\n        /**@type {string}**/\r\n        this.nom = (infos)?infos.nom:\"\";\r\n        /**@type {string}**/\r\n        this.prenom = (infos)?infos.prenom:\"\";\r\n        /**@type {string}**/\r\n        this.ville = (infos)?infos.ville:\"\";\r\n        /**@type {string}**/\r\n        this.tel = (infos)?infos.tel:\"\";\r\n        /**@type {string}**/\r\n        this.mail = (infos)?infos.mail:\"\";\r\n        /**@type {string}**/\r\n        this.solde = (infos)?infos.solde:\"\";\r\n        /**@type {string}**/\r\n        this.archive = (infos)?infos.archive:\"\";\r\n    }\r\n}","/**\r\n * Définition d'une transaction\r\n */\r\nexport default class Transaction{\r\n    constructor(infos) {\r\n        /**@type {number}**/\r\n        this.id = (infos)?infos.id:0;\r\n        /**@type {Date}**/\r\n        this.date = (infos)?new Date(infos.date):\"\";\r\n        /**@type {number}**/\r\n        this.montant = (infos)?infos.montant:0;\r\n        /**@type {string}**/\r\n        this.type = (infos)?infos.type:\"Carte bancaire\";\r\n        /**@type {string}**/\r\n        this.numero = (infos)?infos.numero:\" \";\r\n        /**@type {string}**/\r\n        this.commentaire = (infos)?infos.commentaire:\" \";\r\n        /**@type {string}**/\r\n        this.reservation = (infos && infos.reservation)?infos.reservation:\" \";\r\n        /**@type {string}**/\r\n        this.client = (infos)?infos.client:\"\";\r\n    }\r\n}","import Dbal from \"./Dbal\";\r\nimport Transaction from \"../metier/Transaction\";\r\n\r\nexport default class DaoTransaction {\r\n    /**\r\n     * Singleton\r\n     * @returns {DaoTransaction}\r\n     */\r\n    constructor() {\r\n        if (!!DaoTransaction.instance) {\r\n            return DaoTransaction.instance;\r\n        }\r\n        /**@type {DaoTransaction}**/\r\n        DaoTransaction.instance = this;\r\n        /**@type {Dbal}**/\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Récupère les transaction d'un client\r\n     * @param id {number}\r\n     * @returns {Promise<[]>}\r\n     */\r\n    async getAllByClientId(id){\r\n        const liste = [];\r\n        const reponse = await this.dbal.get(\"/api/transaction/byIdClient/\" + id);\r\n        const transactions = (JSON.parse(reponse));\r\n        transactions.forEach((t)=>{\r\n            liste.push(new Transaction(t))\r\n        });\r\n        return liste;\r\n    }\r\n\r\n    /**\r\n     * Ajoute la transaction de bienvenue\r\n     * @param client {Client}\r\n     * @returns {Promise<string>}\r\n     */\r\n    async initialiser(client){\r\n        const aujourdhui = this.dbal.date2amd(new Date());\r\n        const url = \"/api/transaction/addTransaction/\" + aujourdhui + \"/0,00/Carte bancaire/ /Creation du compte/ /\" + client.id;\r\n        return await this.dbal.post(url);\r\n    }\r\n\r\n    /**\r\n     * Ajoute une transaction\r\n     * @param client {Client}\r\n     * @param transaction {Transaction}\r\n     * @returns {Promise<*>}\r\n     */\r\n    async ajouter(client, transaction){\r\n        const aujourdhui = this.dbal.date2amd(new Date());\r\n        const url = \"/api/transaction/addTransaction/\" + aujourdhui + \"/\"\r\n            + transaction.montant + \"/\"\r\n            + transaction.type + \"/\"\r\n            + transaction.numero + \"/\"\r\n            + transaction.commentaire\r\n            + \"/ /\"\r\n            + client.id;\r\n        await this.dbal.post(url);\r\n        client.solde = parseFloat(client.solde) + parseFloat(transaction.montant);\r\n        return client;\r\n    }\r\n}","import Dbal from \"./Dbal\";\r\n\r\nexport default class DaoUtilisateur {\r\n    /**\r\n     * Singleton\r\n     * @returns {DaoUtilisateur|DaoUtilisateur}\r\n     */\r\n    constructor() {\r\n        if (!!DaoUtilisateur.instance) {\r\n            return DaoUtilisateur.instance;\r\n        }\r\n        /**@type {DaoUtilisateur}**/\r\n        DaoUtilisateur.instance = this;\r\n        /**@type {Dbal}**/\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Ajoute l'utilsateur correspondant au nouveau client pour se connecter sur l'appli mobile\r\n     * @param client {Client}\r\n     * @returns {Promise<string>}\r\n     */\r\n    async addUser(client){\r\n        const login = client.nom + client.prenom.substr(0, 2);\r\n        const url = \"/api/users/addUtilisateur/\" + login + \"/\"+client.nom.toLowerCase()+\"'/Joueur/\" + client.id;\r\n        return await this.dbal.post(url);\r\n    }\r\n}","import Dbal from \"./Dbal\";\r\nimport client from \"../metier/Client\";\r\nimport DaoTransaction from \"./DaoTransaction\";\r\nimport DaoUtilisateur from \"./DaoUtilisateur\";\r\n\r\nexport default class DaoClient {\r\n    /**\r\n     * Singleon\r\n     * @returns {DaoClient|DaoClient}\r\n     */\r\n    constructor() {\r\n        if (!!DaoClient.instance) {\r\n            return DaoClient.instance;\r\n        }\r\n        /**@type {DaoClient}**/\r\n        DaoClient.instance = this;\r\n        /**@type {Dbal}**/\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Récupère tous les clients\r\n     * @returns {Promise<[]>}\r\n     */\r\n    async getAll(){\r\n        const liste =  [];\r\n        const reponse = await this.dbal.get(\"/api/clients\");\r\n        const clients = JSON.parse(reponse);\r\n        for (const c of clients) {\r\n            liste.push(new client(c));\r\n        }\r\n        return liste;\r\n    }\r\n\r\n    /**\r\n     * Récupère un client à partir de sn Id\r\n     * @param id {number}\r\n     * @returns {Promise<client>}\r\n     */\r\n    async getById(id){\r\n        const url = \"/api/clients/\" + id;\r\n        const reponse = await this.dbal.get(url);\r\n        return new client(JSON.parse(reponse));\r\n    }\r\n\r\n    /**\r\n     * Récupère les données spécifiques d'un client\r\n     * @param c {Client}\r\n     * @returns {Promise<client>}\r\n     */\r\n    async load(c){\r\n        let reponse = await this.dbal.get(c.ville);\r\n        c.ville = (JSON.parse(reponse)).nom;\r\n        reponse = await this.dbal.get(\"/api/client/soldeById/\" + c.id);\r\n        c.solde = JSON.parse(reponse);\r\n        return new client(c);\r\n    }\r\n\r\n    /**\r\n     * Archive un client\r\n     * @param client {Client}\r\n     * @param valeur {string}\r\n     * @returns {Promise<string>}\r\n     */\r\n    async archiver(client, valeur){\r\n        const url = \"/api/clients/modifclient\";\r\n        const params = '{\"id\":\"'+client.id+'\",\"nom\":\"'+client.nom+'\",\"prenom\":\"'+client.prenom+'\",\"ville\":\"'+client.ville+'\",\"tel\":\"'+client.tel+'\",\"mail\":\"'+client.mail+'\",\"archive\":\"'+valeur+'\"}';\r\n        return await this.dbal.put(url, params);\r\n    }\r\n\r\n    /**\r\n     * Modifie un client\r\n     * @param client {Client}\r\n     * @returns {Promise<string>}\r\n     */\r\n    async modifier(client){\r\n        const archive = (!client.archive)?\"0\":\"1\";\r\n        const url = \"/api/clients/modifclient\";\r\n        const params = '{\"id\":\"'+client.id+'\",\"nom\":\"'+client.nom+'\",\"prenom\":\"'+client.prenom+'\",\"ville\":\"'+client.ville+'\",\"tel\":\"'+client.tel+'\",\"mail\":\"'+client.mail+'\",\"archive\":\"'+archive+'\"}';\r\n        return await this.dbal.put(url, params);\r\n    }\r\n\r\n    /**\r\n     * Crée un client\r\n     * @param client {Client}\r\n     * @returns {Promise<client>}\r\n     */\r\n    async creer(client){\r\n        let url = \"/api/clients/addClient\";\r\n        const params = '{\"id\":\"'+client.id+'\",\"nom\":\"'+client.nom+'\",\"prenom\":\"'+client.prenom+'\",\"ville\":\"'+client.ville+'\",\"tel\":\"'+client.tel+'\",\"mail\":\"'+client.mail+'\",\"archive\":\"0\"}';\r\n        let reponse = await this.dbal.post(url, params);\r\n        const lastId = JSON.parse(reponse);\r\n        client = await this.getById(lastId);\r\n\r\n        new DaoTransaction().initialiser(client);\r\n        new DaoUtilisateur().addUser(client);\r\n        return await this.load(client);\r\n    }\r\n}","/**\r\n * Définition d'une ville\r\n */\r\nexport default class Ville{\r\n    constructor(infos) {\r\n        /**@type {number}**/\r\n        this.id = (infos)?infos.id:0;\r\n        /**@type {string}**/\r\n        this.nom = (infos)?infos.nom:\"\";\r\n    }\r\n}","import Dbal from \"./Dbal\";\r\nimport Ville from \"../metier/Ville\";\r\n\r\nexport default class DaoVille {\r\n    /**\r\n     * Singleton\r\n     * @returns {DaoVille}\r\n     */\r\n    constructor() {\r\n        if (!!DaoVille.instance) {\r\n            return DaoVille.instance;\r\n        }\r\n        /**@type {DaoVille}**/\r\n        DaoVille.instance = this;\r\n        /**@type {Dbal}**/\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n    /**\r\n     * Récupère les villes dont le nom commence par x\r\n     * @param valeur {string}\r\n     * @returns {Promise<[]>}\r\n     */\r\n    async getVilleByNom(valeur){\r\n        const liste = [];\r\n        const reponse = await this.dbal.get(\"/api/ville/villeByNom/\" + valeur);\r\n        const villes = (JSON.parse(reponse));\r\n        villes.forEach((v)=>{\r\n            liste.push(new Ville(v))\r\n        });\r\n        return liste;\r\n    }\r\n}","import React from 'react';\r\nimport client from \"../metier/Client\";\r\nimport DaoClient from \"../modele/DaoClient\";\r\nimport DaoVille from \"../modele/DaoVille\";\r\n\r\n/**\r\n * Composant qui affiche le client\r\n */\r\nclass InfosClient extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**@type {number}**/\r\n            update: 0,\r\n            /**@type {DaoClient}**/\r\n            daoClient: new DaoClient(),\r\n            /**@type {Client}**/\r\n            client: new client(null),\r\n            /**@type {[Client]}**/\r\n            listeClients: props.clients,\r\n            /**@type {[Ville]}**/\r\n            listeVilles: [],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force la mise à jour de la page\r\n     */\r\n    update() {\r\n        this.setState({\r\n            update: this.state.update + 1\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Change une info du client\r\n     * @param propriete {string}\r\n     * @param event\r\n     * @returns {Promise<void>}\r\n     */\r\n    async change(propriete, event) {\r\n        const client = this.state.client;\r\n        client[propriete] = event.target.value;\r\n\r\n        if (propriete === \"ville\" && event.target.value.length >= 4){\r\n            document.body.style.cursor = 'progress';\r\n            const villes = await new DaoVille().getVilleByNom(event.target.value);\r\n            document.body.style.cursor = 'default';\r\n            this.setState({\r\n                listeVilles: villes,\r\n                client: client\r\n            });\r\n        } else {\r\n            this.setState({\r\n                listeVilles: [],\r\n                client: client\r\n            });\r\n        }\r\n        this.props.onChange(client);\r\n    }\r\n\r\n    /**\r\n     * Séléctionne un client\r\n     * @param event\r\n     */\r\n    selectClient(event) {\r\n        const self = this;\r\n        if (event.nativeEvent.data === undefined) {\r\n            const options = Array.from(event.target.list.children);\r\n            options.forEach(async (option) => {\r\n                if (option.value === event.target.value) {\r\n                    const c =  await self.loadClient(JSON.parse(option.dataset.client));\r\n                    this.setState({client: c});\r\n                    this.props.onChange(c);\r\n                }\r\n            });\r\n        //Ou si l'on change son nom\r\n        } else {\r\n            const client = this.state.client;\r\n            client.nom = event.target.value;\r\n            this.setState({\r\n                client: client\r\n            });\r\n            this.props.onChange(client);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Charge les infos d'un client\r\n     * @param c {Client}\r\n     * @returns {Promise<client>}\r\n     */\r\n    async loadClient(c){\r\n        document.body.style.cursor = 'progress';\r\n        const result = await this.state.daoClient.load(c);\r\n        document.body.style.cursor = 'default';\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Reset les infos du client\r\n     */\r\n    reset() {\r\n        const c = new client(null);\r\n        this.setState({client: c});\r\n        this.props.onChange(c);\r\n    }\r\n\r\n    /**\r\n     * Archive le client séléctionné\r\n     * @param archive {string}\r\n     * @returns {Promise<void>}\r\n     */\r\n    async archiver(archive){\r\n        const client = this.state.client;\r\n        client.archive = (archive !== \"0\");\r\n        document.body.style.cursor = 'progress';\r\n        await this.state.daoClient.archiver(client, archive);\r\n        document.body.style.cursor = 'default';\r\n        this.setState({\r\n            client: client\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Modifie le client\r\n     * @returns {Promise<void>}\r\n     */\r\n    async modifier(){\r\n        if (this.state.client.nom !== \"\" && this.state.client.prenom !== \"\"){\r\n            document.body.style.cursor = 'progress';\r\n            await this.state.daoClient.modifier(this.state.client);\r\n            alert(\"Le client a été modifié\");\r\n            document.body.style.cursor = 'default';\r\n            this.update();\r\n        } else {\r\n            alert(\"Le nom et le prénom ne peuvent pas être vide\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crée un nouveau client\r\n     * @returns {Promise<void>}\r\n     */\r\n    async creer(){\r\n        const client = await this.state.daoClient.creer(this.state.client);\r\n        if (client.nom !== \"\" && client.prenom !== \"\"){\r\n            document.body.style.cursor = 'progress';\r\n            document.body.style.cursor = 'default';\r\n            alert(\"Le client a été crée\");\r\n            this.setState({client: client});\r\n            this.props.onChange(client);\r\n        } else {\r\n            alert(\"Merci de renseigner les champs obligatoires\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Affiche les boutons d'actions\r\n     * @returns {*}\r\n     */\r\n    afficherActions() {\r\n        if (this.state.client.id !== 0 && !this.state.client.archive) {\r\n            return (\r\n                <section className=\"actions\">\r\n                    <button className=\"editer\" onClick={this.modifier.bind(this)}>MODIFIER</button>\r\n                    <button className=\"archiver\" onClick={this.archiver.bind(this,\"1\")}>ARCHIVER</button>\r\n                    <button className=\"nouveau\" onClick={this.reset.bind(this)}>NOUVEAU</button>\r\n                </section>\r\n            )\r\n        } else if (this.state.client.id !== 0) {\r\n            return (\r\n                <section className=\"actions\">\r\n                    <button className=\"editer\" onClick={this.modifier.bind(this)}>MODIFIER</button>\r\n                    <button className=\"desarchiver\" onClick={this.archiver.bind(this,\"0\")}>DESARCHIVER</button>\r\n                    <button className=\"nouveau\" onClick={this.reset.bind(this)}>NOUVEAU</button>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                <section className=\"actions\">\r\n                    <button className=\"editer\" onClick={this.creer.bind(this)}>CREER</button>\r\n                    <button className=\"archiver\" disabled>ARCHIVER</button>\r\n                </section>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const client = this.state.client;\r\n        return (\r\n            <section className=\"selectionClient\">\r\n                <section className=\"client\">\r\n                    <h2 className=\"title\">CLIENTS</h2>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">NOM</legend>\r\n                        <input className=\"zone prenom\" type=\"text\" list=\"listeClient\" value={client.nom}\r\n                               onChange={this.selectClient.bind(this)}/>\r\n                        <datalist id=\"listeClient\">\r\n                            {this.state.listeClients.map((client, index) => {\r\n                                return (\r\n                                    <option key={index}\r\n                                            data-client={JSON.stringify(client)}>{client.nom + \" \" +  client.prenom}</option>\r\n                                )\r\n                            })}\r\n                        </datalist>\r\n                    </div>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">PRENOM</legend>\r\n                        <input className=\"zone prenom\" type=\"text\" value={client.prenom}\r\n                               onChange={this.change.bind(this, \"prenom\")}/>\r\n                    </div>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">VILLE</legend>\r\n                        <input className=\"zone ville\" type=\"text\" list=\"listeVille\" value={client.ville}\r\n                               onChange={this.change.bind(this, \"ville\")}/>\r\n                        <datalist id=\"listeVille\">\r\n                            {this.state.listeVilles.map((ville, index) => {\r\n                                return (\r\n                                    <option key={index}\r\n                                            data-client={JSON.stringify(ville)}>{ville.nom}</option>\r\n                                )\r\n                            })}\r\n                        </datalist>\r\n                    </div>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">E-MAIL</legend>\r\n                        <input className=\"zone mail\" type=\"text\" value={client.mail}\r\n                               onChange={this.change.bind(this, \"mail\")}/>\r\n                    </div>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">TELEPHONE</legend>\r\n                        <input className=\"zone telephone\" type=\"text\" value={client.tel}\r\n                               onChange={this.change.bind(this, \"tel\")}/>\r\n                    </div>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">SOLDE</legend>\r\n                        <input className=\"zone solde\" type=\"text\" value={client.solde} disabled/>\r\n                    </div>\r\n                    {this.afficherActions()}\r\n                </section>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InfosClient;","import React from 'react';\r\n\r\n/**\r\n * Composant qui affiche le détail d'une transaction\r\n */\r\nexport default class DetailsTransaction extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**@type {boolean}**/\r\n            initialized: false,\r\n            /**@type {[Reservation, Salle, Theme, [Obstacle]]}**/\r\n            reservationDetailee: null,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Récupère les objets du détail\r\n     * @returns {Promise<void>}\r\n     */\r\n    async componentDidMount() {\r\n        let resaDetail = this.props.reservationDetailee;\r\n        await resaDetail.then((resolve)=>{\r\n            resaDetail = resolve;\r\n        });\r\n        this.setState({\r\n            initialized: true,\r\n            reservationDetailee: resaDetail,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.initialized) {return null}\r\n        else{\r\n            const rd = this.state.reservationDetailee;\r\n            const options = {hour: \"2-digit\", minute: \"2-digit\"};\r\n            const arrivee = new Intl.DateTimeFormat(\"fr-FR\", options).format(rd[0].date);\r\n            return (\r\n                <section className=\"details\">\r\n                    <div className=\"salle\">{\"Salle n°\" + rd[1].numero}</div>\r\n                    <div className=\"theme\">{\"Theme : \" + rd[2].nom}</div>\r\n                    <div className=\"nbJoueur\">{\"Nombre de joueur : \" + rd[0].nbJoueur}</div>\r\n                    <div className=\"heureArrivee\">{\"Heure d'arrivée : \" + arrivee}</div>\r\n                    <ul>\r\n                    {rd[3].map((o, i)=>{\r\n                        return(\r\n                            <li key={i} className=\"obstacle\">{o.qte + \" \" + o.libelle + \"s à \" + o.prix + \"€\"}</li>\r\n                        )\r\n                    })}\r\n                    </ul>\r\n                </section>\r\n            )\r\n        }\r\n    }\r\n}","/**\r\n * Définition d'une salle\r\n */\r\nexport default class Salle{\r\n    constructor(infos) {\r\n        /**@type {number}**/\r\n        this.id = (infos)?infos.id:0;\r\n        /**@type {string}**/\r\n        this.ville = (infos)?infos.ville:\"\";\r\n        /**@type {string}**/\r\n        this.numero = (infos)?infos.numero:\"\";\r\n        /**@type {string}**/\r\n        this.prix = (infos)?infos.prix:\"\";\r\n        /**@type {string}**/\r\n        this.heureOuverture = (infos)?new Date(infos.heureOuverture):\"\";\r\n        /**@type {string}**/\r\n        this.heureFermeture = (infos)?new Date(infos.heureFermeture):\"\";\r\n        /**@type {string}**/\r\n        this.archive = (infos)?infos.archive:\"\";\r\n        /**@type {string}**/\r\n        this.theme = (infos)?infos.theme:\"\";\r\n    }\r\n}","import Dbal from \"./Dbal\";\r\nimport Salle from \"../metier/Salle\";\r\n\r\nexport default class DaoSalle {\r\n    /**\r\n     * Singleton\r\n     * @returns {DaoSalle}\r\n     */\r\n    constructor() {\r\n        if (!!DaoSalle.instance) {\r\n            return DaoSalle.instance;\r\n        }\r\n        /**@type {DaoSalle}**/\r\n        DaoSalle.instance = this;\r\n        /**@type {Dbal}**/\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Récupère la salle d'une réservation\r\n     * @param reservation {Reservation}\r\n     * @returns {Promise<Salle>}\r\n     */\r\n    async getSalleByReservation(reservation){\r\n        const reponse = await this.dbal.get(reservation.salle);\r\n        return  new Salle(JSON.parse(reponse));\r\n    }\r\n}","/**\r\n * Définition d'une réservation\r\n */\r\nexport default class Reservation{\r\n    constructor(infos) {\r\n        /**@type {number}**/\r\n        this.id = (infos)?infos.id:\"\";\r\n        /**@type {Date}**/\r\n        this.date = (infos)?new Date(infos.date):\"\";\r\n        /**@type {string}**/\r\n        this.commentaire = (infos)?infos.commentaire:\"\";\r\n        /**@type {string}**/\r\n        this.nbJoueur = (infos)?infos.nbJoueur:\"\";\r\n        /**@type {string}**/\r\n        this.client = (infos)?infos.client:\"\";\r\n        /**@type {string}**/\r\n        this.salle = (infos)?infos.salle:\"\";\r\n    }\r\n}","import Dbal from \"./Dbal\";\r\nimport Reservation from \"../metier/Reservation\";\r\n\r\nexport default class DaoReservation {\r\n    /**\r\n     * Singleton\r\n     * @returns {DaoReservation}\r\n     */\r\n    constructor() {\r\n        if (!!DaoReservation.instance) {\r\n            return DaoReservation.instance;\r\n        }\r\n        /**@type {DaoReservation}**/\r\n        DaoReservation.instance = this;\r\n        /**@type {Dbal}**/\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Récupère la réservation lié à une transaction\r\n     * @param transaction {Transaction}\r\n     * @returns {Promise<Reservation>}\r\n     */\r\n    async getReservationByTransaction(transaction){\r\n        let reponse = await this.dbal.get(transaction.reservation);\r\n        return new Reservation(JSON.parse(reponse));\r\n    }\r\n}","/**\r\n * Définition d'un obstacle\r\n */\r\nclass Obstacle{\r\n    constructor(infos) {\r\n        /**@type {number}**/\r\n        this.id = (infos)?infos.id:0;\r\n        /**@type {string}**/\r\n        this.position = (infos)?infos.position:\"\";\r\n        /**@type {string}**/\r\n        this.commentaire = (infos)?infos.commentaire:\"\";\r\n        /**@type {number}**/\r\n        this.qte = (infos)?infos.qte:0;\r\n        /**@type {string}**/\r\n        this.article = (infos)?infos.article:\"\";\r\n        /**@type {string}**/\r\n        this.reservation = (infos)?infos.reservation:\"\";\r\n        /**@type {string}**/\r\n        this.libelle = \"\";\r\n        /**@type {number}**/\r\n        this.prix = 0;\r\n    }\r\n}\r\n\r\nexport default Obstacle;","import Dbal from \"./Dbal\";\r\nimport Obstacle from \"../metier/Obstacle\";\r\n\r\nexport default class DaoObstacle {\r\n    /**\r\n     * Singleton\r\n     * @returns {DaoObstacle|DaoObstacle}\r\n     */\r\n    constructor() {\r\n        if (!!DaoObstacle.instance) {\r\n            return DaoObstacle.instance;\r\n        }\r\n        /**@type {DaoObstacle}**/\r\n        DaoObstacle.instance = this;\r\n        /**@type {Dbal}**/\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Récupères les données supplémentaire d'un obstacle\r\n     * @param obstacle {Obstacle}\r\n     * @returns {Promise<*>}\r\n     */\r\n    async load(obstacle){\r\n        const reponse = await this.dbal.get(obstacle.article);\r\n        const article = JSON.parse(reponse);\r\n        obstacle.libelle = article[0].libelle;\r\n        obstacle.prix = article[0].montant;\r\n        return obstacle;\r\n    }\r\n\r\n    /**\r\n     * Récupère les obstacles d'une réservation\r\n     * @param reservation {Reservation}\r\n     * @returns {Promise<[]>}\r\n     */\r\n    async getObstacleByReservation(reservation){\r\n        const response = await this.dbal.get(\"/api/obstacle/obstacleByIdReservation/\" + reservation.id);\r\n        const obstacles = JSON.parse(response);\r\n        const liste = [];\r\n        for (const i in obstacles) {\r\n            let o = new Obstacle(obstacles[i]);\r\n            o = await this.load(o);\r\n            liste.push(o);\r\n        }\r\n        return liste;\r\n    }\r\n}","/**\r\n * Définition d'un theme\r\n */\r\nexport default class Theme{\r\n    constructor(infos) {\r\n        /**@type {number}**/\r\n        this.id = (infos)?infos.id:0;\r\n        /**@type {string}**/\r\n        this.nom = (infos)?infos.nom:\"\";\r\n    }\r\n}","import Dbal from \"./Dbal\";\r\nimport Theme from \"../metier/Theme\";\r\n\r\nexport default class DaoTheme {\r\n    /**\r\n     * Singleton\r\n     * @returns {DaoTheme|DaoTheme}\r\n     */\r\n    constructor() {\r\n        if (!!DaoTheme.instance) {\r\n            return DaoTheme.instance;\r\n        }\r\n        /**@type {DaoTheme}**/\r\n        DaoTheme.instance = this;\r\n        /**@type {Dbal}**/\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Récupère le thème d'une salle\r\n     * @param salle {Salle}\r\n     * @returns {Promise<Theme>}\r\n     */\r\n    async getThemeBySalle(salle){\r\n        const reponse = await this.dbal.get(salle.theme);\r\n        return new Theme(JSON.parse(reponse));\r\n    }\r\n}","import React from 'react';\r\nimport DetailsTransaction from \"./DetailsTransaction\";\r\nimport DaoSalle from \"../modele/DaoSalle\";\r\nimport DaoReservation from \"../modele/DaoReservation\";\r\nimport DaoObstacle from \"../modele/DaoObstacle\";\r\nimport DaoTheme from \"../modele/DaoTheme\";\r\n\r\n/**\r\n * Composant qui affiche la liste des transaction\r\n */\r\nexport default class Transactions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**@type {Transaction}**/\r\n            transactions: null,\r\n            /**@type {Client}**/\r\n            client: props.client,\r\n            /**@type {number}**/\r\n            details: -1,\r\n            /**@type {number}**/\r\n            lastDetails: -1,\r\n            /**@type {[Reservation, Salle, Theme, [Obstacle]]}**/\r\n            reservationDetailee: null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Définit la transaction qui a été séléctionné\r\n     * @param index {number}\r\n     */\r\n    details(index){\r\n        const transactions = this.props.transactions;\r\n        if (transactions[index].reservation !== \" \"){\r\n            if (this.state.details === index){\r\n                this.setState({\r\n                    lastDetails: this.state.details,\r\n                    details: -1\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    details: index,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Charge le détail d'une réservation\r\n     * @returns {Promise<(Reservation|Salle|Theme|Obstacle[])[]|null|[Reservation, Salle, Theme, *[]]>}\r\n     */\r\n    async loadReservation(){\r\n        if (this.state.lastDetails !== this.state.details) {\r\n            document.body.style.cursor = 'progress';\r\n            const transaction = this.props.transactions[this.state.details];\r\n            const reservation = await new DaoReservation().getReservationByTransaction(transaction);\r\n            const salle = await new DaoSalle().getSalleByReservation(reservation);\r\n            const obstacle = await new DaoObstacle().getObstacleByReservation(reservation);\r\n            const theme = await new DaoTheme().getThemeBySalle(salle);\r\n            const resaDetail = [reservation, salle, theme, obstacle];\r\n            this.setState({\r\n                reservationDetailee: resaDetail,\r\n            });\r\n            document.body.style.cursor = 'default';\r\n            return resaDetail;\r\n        } else{\r\n            return  this.state.reservationDetailee;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Affiche ou non le composant DetailsTransaction\r\n     * @link {DetailsTransaction}\r\n     * @returns {null|*}\r\n     */\r\n    afficherDetails(){\r\n        if (this.state.details > -1) {\r\n            let reservationDetaille = this.loadReservation();\r\n            return <DetailsTransaction reservationDetailee={reservationDetaille}/>\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    updateTransaction(){\r\n        //console.log(\"ici\");\r\n        this.setState({\r\n            client: this.props.client,\r\n            details : -1,\r\n            lastDetails: -1\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const transactions = this.props.transactions;\r\n        if (this.state.client.id !== this.props.client.id) {\r\n            this.updateTransaction();\r\n            return null\r\n        } else {\r\n            //console.log(this.state);\r\n            const options = {weekday: \"short\", day: \"numeric\", month: \"short\", year: \"numeric\"};\r\n            if (transactions.length > 0) {\r\n                return (\r\n                    <section className=\"transactions\">\r\n                        <h2 className=\"title\">TRANSACTIONS</h2>\r\n                        <section className=\"tableau\">\r\n                            <h3 className=\"colonne\">Date</h3>\r\n                            <h3 className=\"colonne bordure\">Montant</h3>\r\n                            {transactions.map((t, i) => {\r\n                                const date = new Intl.DateTimeFormat(\"fr-FR\", options).format(t.date);\r\n                                if (transactions[i].reservation !== \" \") {\r\n                                    const selected = (this.state.details === i);\r\n                                    return (\r\n                                        <section className={\"ligne depense \" + selected} key={i}\r\n                                                 onClick={this.details.bind(this, i)}>\r\n                                            <span className=\"date\">{date.toUpperCase()}</span>\r\n                                            <span className=\"montant bordure\">{t.montant}</span>\r\n                                        </section>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <section className={\"ligne ajout\"} key={i}>\r\n                                            <span className=\"date\">{date.toUpperCase()}</span>\r\n                                            <span className=\"montant bordure\">{t.montant}</span>\r\n                                        </section>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </section>\r\n                        {this.afficherDetails()}\r\n                    </section>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Transaction from \"../metier/Transaction\";\r\nimport DaoTransaction from \"../modele/DaoTransaction\";\r\n\r\n/**\r\n * Composant qui affiche le formulaire d'ajout des crédits\r\n */\r\nexport default class Credits extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**@type {Client}**/\r\n            client: props.client,\r\n            /**@type {Transaction}**/\r\n            transaction: new Transaction(),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change les infos du formulaire\r\n     * @param zone {string}\r\n     * @param event\r\n     */\r\n    change(zone, event) {\r\n        const t = this.state.transaction;\r\n        t[zone] = event.target.value;\r\n        this.setState({transaction: t})\r\n    }\r\n\r\n    /**\r\n     * Met à jour le client s'il a changé\r\n     */\r\n    updateClient(){\r\n        this.setState({\r\n            client: this.props.client\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Ajoute les crédits\r\n     * @returns {Promise<void>}\r\n     */\r\n    async ajouter() {\r\n        if (this.state.transaction.montant > 0) {\r\n            document.body.style.cursor = 'progress';\r\n            const client = await new DaoTransaction().ajouter(this.state.client, this.state.transaction);\r\n            document.body.style.cursor = 'default';\r\n            alert(\"Les pépètes ont été ajoutés\");\r\n            this.props.onAdd(client);\r\n        } else {\r\n            alert(\"Veuillez saisir un montant supérieur à 0\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.client.id);\r\n        if (this.state.client.id !== this.props.client.id) {\r\n            this.updateClient();\r\n            return null\r\n        }\r\n        else if(this.state.client.id === 0){\r\n            return null\r\n        }\r\n        else {\r\n            const t = this.state.transaction;\r\n            return (\r\n                <section className=\"credits\">\r\n                    <h2 className=\"title\">CREDITS</h2>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">TYPE</legend>\r\n                        <select className=\"zone type\" value={t.type} onChange={this.change.bind(this, \"type\")}>\r\n                            <option value=\"Carte bancaire\">Carte bancaire</option>\r\n                            <option value=\"Cheque\">Cheque</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">MONTANT</legend>\r\n                        <input type=\"number\" min=\"0\" className=\"zone montant\" value={t.montant}\r\n                               onChange={this.change.bind(this, \"montant\")}/>\r\n                    </div>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">NUMERO</legend>\r\n                        <input type=\"text\" className=\"zone numero\" value={t.numero}\r\n                               onChange={this.change.bind(this, \"numero\")}/>\r\n                    </div>\r\n                    <div className=\"saisie\">\r\n                        <legend className=\"description\">COMMENTAIRE</legend>\r\n                        <textarea className=\"zone commentaire\" value={t.commentaire}\r\n                                  onChange={this.change.bind(this, \"commentaire\")}/>\r\n                    </div>\r\n                    <section className=\"actions\">\r\n                        <button className=\"ajouter\" onClick={this.ajouter.bind(this)}>AJOUTER</button>\r\n                    </section>\r\n                </section>\r\n            )\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport DaoClient from \"../modele/DaoClient\";\r\nimport DaoTransaction from \"../modele/DaoTransaction\";\r\n\r\nimport client from \"../metier/Client\";\r\n\r\nimport InfosClient from './InfosClient';\r\nimport Transactions from './Transactions';\r\nimport Credits from \"./Credits\";\r\n\r\n/**\r\n * Page principale qui appelle les composants\r\n */\r\nexport default class Page extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**@type {boolean}**/\r\n            initialized: false,\r\n            /**@type {[Client]}**/\r\n            liste_clients: props.clients,\r\n            /**@type {Client}**/\r\n            client: new client(null),\r\n            /**@type {[Transaction]}**/\r\n            transactions: [],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Récupère la liste des clients\r\n     * @returns {Promise<void>}\r\n     */\r\n    async componentDidMount() {\r\n        const liste = await new DaoClient().getAll();\r\n        this.setState({\r\n            initialized: true,\r\n            liste_clients: liste\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Charge les infos du client séléctionné\r\n     * @param client\r\n     * @returns {Promise<void>}\r\n     */\r\n    async changeClient(client){\r\n        let list = [];\r\n        if (client.id !== \"\"){\r\n            list = await new DaoTransaction().getAllByClientId(client.id);\r\n        }\r\n        this.setState({\r\n            client: client,\r\n            transactions: list,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Affiche les transactions et l'ajout de crédit du client\r\n     * @link {Transactions}\r\n     * @link {Credits}\r\n     * @returns {*}\r\n     */\r\n    afficherDonnees(){\r\n        if (this.state.client.id !== \"\"){\r\n            return(\r\n                <section>\r\n                    <Transactions client={this.state.client} transactions={this.state.transactions}/>\r\n                    <Credits client={this.state.client} onAdd={this.changeClient.bind(this)}/>\r\n                </section>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.initialized) {\r\n            return null\r\n        } else {\r\n            const client = this.state.client;\r\n            return (\r\n                <section className=\"page\">\r\n                    <section className=\"entete\">\r\n                        <section className=\"navigation\">\r\n                            <h2 className=\"title\">Comptabilité</h2>\r\n                        </section>\r\n                        <section className=\"stickClient\">\r\n                            <h3>{client.nom}</h3>\r\n                            <h3>{client.prenom}</h3>\r\n                            <h3>{client.mail}</h3>\r\n                        </section>\r\n                    </section>\r\n                    <section className=\"corps\">\r\n                        <InfosClient clients={this.state.liste_clients} onChange={this.changeClient.bind(this)}/>\r\n                        {this.afficherDonnees()}\r\n                    </section>\r\n                </section>\r\n            )\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Page from './components/Page';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            liste_clients: props.clients,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Page clients={this.state.liste_clients}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App clients={[\"e\"]}/>,\r\n    document.getElementById('page_backend'),\r\n);\r\n"],"sourceRoot":""}