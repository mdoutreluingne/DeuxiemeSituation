{"ast":null,"code":"export default class Dbal {\n  constructor() {\n    if (!!Dbal.instance) {\n      return Dbal.instance;\n    }\n\n    Dbal.instance = this;\n    this.ip = \"localhost:8080\";\n    this.token = this.load();\n    return this;\n  }\n\n  async load() {\n    return await this.post(\"/api/login_check\", {\n      \"username\": \"admin\",\n      \"password\": \"admin\"\n    });\n  }\n\n  async get(url) {\n    url = \"http://\" + this.ip + url;\n    let token = await this.token;\n    token = JSON.parse(token).token;\n    return new Promise((resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('GET', url, true);\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      xhr.send();\n    });\n  }\n\n  async put(url) {\n    url = \"http://\" + this.ip + url;\n    let token = await this.token;\n    token = JSON.parse(token).token;\n    return new Promise((resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('PUT', url, true);\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      xhr.send();\n    });\n  }\n\n  post(url, objet) {\n    url = \"http://\" + this.ip + url;\n    console.log(url);\n    return new Promise(async (resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 201 || xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('POST', url, true);\n\n      if (this.token !== undefined) {\n        let token = await this.token;\n        token = JSON.parse(token).token;\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      }\n\n      if (objet) {\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(JSON.stringify(objet));\n      } else {\n        xhr.send();\n      }\n    });\n  }\n\n  date2amd(date) {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    };\n    date = date.toLocaleDateString('fr-FR', options);\n    const val = date.split(\"/\");\n    date = val[2] + \"-\" + val[1] + \"-\" + val[0];\n    return date;\n  }\n\n}\n/**\r\n *             fetch(\"http://localhost:8080/api/clients\")\r\n .then(res => res.json())\r\n .then(\r\n async (result) => {\r\n                        const create = result.map((c)=> {\r\n                            clients.push(new client(c));\r\n                        });\r\n                        return await Promise.all(create);\r\n                    },\r\n (error) => {console.log(error);}\r\n );\r\n **/","map":{"version":3,"sources":["C:/wamp64/www/PPE2/DeuxiemeSituation/backend/src/modele/dbal.js"],"names":["Dbal","constructor","instance","ip","token","load","post","get","url","JSON","parse","Promise","resolve","reject","xhr","window","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","setRequestHeader","send","put","objet","console","log","undefined","stringify","date2amd","date","options","year","month","day","toLocaleDateString","val","split"],"mappings":"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","sourcesContent":["export default class Dbal {\r\n    constructor() {\r\n        if (!!Dbal.instance) {\r\n            return Dbal.instance;\r\n        }\r\n        Dbal.instance = this;\r\n        this.ip = \"localhost:8080\";\r\n        this.token = this.load();\r\n        return this;\r\n    }\r\n\r\n    async load(){\r\n        return await this.post(\"/api/login_check\", {\"username\":\"admin\",\"password\":\"admin\"});\r\n    }\r\n\r\n    async get(url){\r\n        url = \"http://\" + this.ip + url;\r\n        let token = await this.token;\r\n        token = JSON.parse(token).token;\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('GET', url, true);\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            xhr.send()\r\n        })\r\n    }\r\n\r\n    async put(url){\r\n        url = \"http://\" + this.ip + url;\r\n        let token = await this.token;\r\n        token = JSON.parse(token).token;\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('PUT', url, true);\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            xhr.send()\r\n        })\r\n    }\r\n\r\n    post(url, objet){\r\n        url = \"http://\" + this.ip + url;\r\n        console.log(url);\r\n        return new Promise(async (resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 201 || xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('POST', url, true);\r\n            if (this.token !== undefined){\r\n                let token = await this.token;\r\n                token = JSON.parse(token).token;\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            }\r\n            if (objet){\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n                xhr.send(JSON.stringify(objet))\r\n            }\r\n            else {xhr.send()}\r\n        })\r\n    }\r\n\r\n    date2amd(date){\r\n        const options = {year: 'numeric', month: 'numeric', day: 'numeric' };\r\n        date = date.toLocaleDateString('fr-FR', options);\r\n        const val = date.split(\"/\");\r\n        date = val[2] + \"-\" + val[1] + \"-\" + val[0];\r\n        return date;\r\n    }\r\n}\r\n\r\n/**\r\n *             fetch(\"http://localhost:8080/api/clients\")\r\n .then(res => res.json())\r\n .then(\r\n async (result) => {\r\n                        const create = result.map((c)=> {\r\n                            clients.push(new client(c));\r\n                        });\r\n                        return await Promise.all(create);\r\n                    },\r\n (error) => {console.log(error);}\r\n );\r\n **/"]},"metadata":{},"sourceType":"module"}