{"ast":null,"code":"export default class Dbal {\n  constructor() {\n    if (!!Dbal.instance) {\n      return Dbal.instance;\n    }\n\n    Dbal.instance = this;\n    return this;\n  }\n\n  get(url) {\n    return new Promise((resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('GET', url, true);\n      xhr.send();\n    });\n  }\n\n  put(url) {\n    return new Promise((resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('PUT', url, true);\n      xhr.send();\n    });\n  }\n\n  post(url) {\n    return new Promise((resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 201) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('POST', url, true);\n      xhr.send();\n    });\n  }\n\n  date2amd(date) {\n    const options = {\n      year: 'long',\n      month: 'long',\n      day: 'long'\n    };\n    console.log(date.toLocaleDateString('fr-FR', options));\n  }\n\n}\n/**\r\n *             fetch(\"http://localhost:8080/api/clients\")\r\n .then(res => res.json())\r\n .then(\r\n async (result) => {\r\n                        const create = result.map((c)=> {\r\n                            clients.push(new client(c));\r\n                        });\r\n                        return await Promise.all(create);\r\n                    },\r\n (error) => {console.log(error);}\r\n );\r\n **/","map":{"version":3,"sources":["C:/wamp64/www/PPE2/DeuxiemeSituation/backend/src/modele/dbal.js"],"names":["Dbal","constructor","instance","get","url","Promise","resolve","reject","xhr","window","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send","put","post","date2amd","date","options","year","month","day","console","log","toLocaleDateString"],"mappings":"AAAA,eAAe,MAAMA,IAAN,CAAW;AACtBC,EAAAA,WAAW,GAAG;AACV,QAAI,CAAC,CAACD,IAAI,CAACE,QAAX,EAAqB;AACjB,aAAOF,IAAI,CAACE,QAAZ;AACH;;AACDF,IAAAA,IAAI,CAACE,QAAL,GAAgB,IAAhB;AAEA,WAAO,IAAP;AACH;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAK;AACJ,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClC,YAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,cAAX,EAAZ;;AACAF,MAAAA,GAAG,CAACG,kBAAJ,GAAyB,MAAI;AACzB,YAAIH,GAAG,CAACI,UAAJ,KAAmB,CAAvB,EAAyB;AACrB,cAAIJ,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAuB;AACnBP,YAAAA,OAAO,CAACE,GAAG,CAACM,YAAL,CAAP;AACH,WAFD,MAEM;AACFP,YAAAA,MAAM,CAACC,GAAD,CAAN;AACH;AACJ;AACJ,OARD;;AASAA,MAAAA,GAAG,CAACO,IAAJ,CAAS,KAAT,EAAgBX,GAAhB,EAAqB,IAArB;AACAI,MAAAA,GAAG,CAACQ,IAAJ;AACH,KAbM,CAAP;AAcH;;AAEDC,EAAAA,GAAG,CAACb,GAAD,EAAK;AACJ,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClC,YAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,cAAX,EAAZ;;AACAF,MAAAA,GAAG,CAACG,kBAAJ,GAAyB,MAAI;AACzB,YAAIH,GAAG,CAACI,UAAJ,KAAmB,CAAvB,EAAyB;AACrB,cAAIJ,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAuB;AACnBP,YAAAA,OAAO,CAACE,GAAG,CAACM,YAAL,CAAP;AACH,WAFD,MAEM;AACFP,YAAAA,MAAM,CAACC,GAAD,CAAN;AACH;AACJ;AACJ,OARD;;AASAA,MAAAA,GAAG,CAACO,IAAJ,CAAS,KAAT,EAAgBX,GAAhB,EAAqB,IAArB;AACAI,MAAAA,GAAG,CAACQ,IAAJ;AACH,KAbM,CAAP;AAcH;;AAEDE,EAAAA,IAAI,CAACd,GAAD,EAAK;AACL,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClC,YAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,cAAX,EAAZ;;AACAF,MAAAA,GAAG,CAACG,kBAAJ,GAAyB,MAAI;AACzB,YAAIH,GAAG,CAACI,UAAJ,KAAmB,CAAvB,EAAyB;AACrB,cAAIJ,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAuB;AACnBP,YAAAA,OAAO,CAACE,GAAG,CAACM,YAAL,CAAP;AACH,WAFD,MAEM;AACFP,YAAAA,MAAM,CAACC,GAAD,CAAN;AACH;AACJ;AACJ,OARD;;AASAA,MAAAA,GAAG,CAACO,IAAJ,CAAS,MAAT,EAAiBX,GAAjB,EAAsB,IAAtB;AACAI,MAAAA,GAAG,CAACQ,IAAJ;AACH,KAbM,CAAP;AAcH;;AAEDG,EAAAA,QAAQ,CAACC,IAAD,EAAM;AACV,UAAMC,OAAO,GAAG;AAACC,MAAAA,IAAI,EAAE,MAAP;AAAeC,MAAAA,KAAK,EAAE,MAAtB;AAA8BC,MAAAA,GAAG,EAAE;AAAnC,KAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,kBAAL,CAAwB,OAAxB,EAAiCN,OAAjC,CAAZ;AACH;;AAhEqB;AAmE1B","sourcesContent":["export default class Dbal {\r\n    constructor() {\r\n        if (!!Dbal.instance) {\r\n            return Dbal.instance;\r\n        }\r\n        Dbal.instance = this;\r\n\r\n        return this;\r\n    }\r\n\r\n    get(url){\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('GET', url, true);\r\n            xhr.send()\r\n        })\r\n    }\r\n\r\n    put(url){\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('PUT', url, true);\r\n            xhr.send()\r\n        })\r\n    }\r\n\r\n    post(url){\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 201){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('POST', url, true);\r\n            xhr.send()\r\n        })\r\n    }\r\n\r\n    date2amd(date){\r\n        const options = {year: 'long', month: 'long', day: 'long' };\r\n        console.log(date.toLocaleDateString('fr-FR', options));\r\n    }\r\n}\r\n\r\n/**\r\n *             fetch(\"http://localhost:8080/api/clients\")\r\n .then(res => res.json())\r\n .then(\r\n async (result) => {\r\n                        const create = result.map((c)=> {\r\n                            clients.push(new client(c));\r\n                        });\r\n                        return await Promise.all(create);\r\n                    },\r\n (error) => {console.log(error);}\r\n );\r\n **/"]},"metadata":{},"sourceType":"module"}