{"ast":null,"code":"import Dbal from \"./dbal\";\nimport Obstacle from \"../metier/Obstacle\";\nexport default class DaoObstacle {\n  constructor() {\n    if (!!DaoObstacle.instance) {\n      return DaoObstacle.instance;\n    }\n\n    DaoObstacle.instance = this;\n    this.dbal = new Dbal();\n    return this;\n  }\n\n  async getObstacleByReservation(reservation) {\n    const response = await this.dbal.get(\"/api/obstacle/obstacleByIdReservation/\" + reservation.id);\n    const obstacles = JSON.parse(response);\n    const liste = [];\n\n    for (const i in obstacles) {\n      liste.push(new Obstacle(obstacles[i]));\n    }\n\n    return liste;\n  }\n\n}","map":{"version":3,"sources":["C:/wamp64/www/PPE2/DeuxiemeSituation/backend/src/modele/DaoObstacle.js"],"names":["Dbal","Obstacle","DaoObstacle","constructor","instance","dbal","getObstacleByReservation","reservation","response","get","id","obstacles","JSON","parse","liste","i","push"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC7BC,EAAAA,WAAW,GAAG;AACV,QAAI,CAAC,CAACD,WAAW,CAACE,QAAlB,EAA4B;AACxB,aAAOF,WAAW,CAACE,QAAnB;AACH;;AACDF,IAAAA,WAAW,CAACE,QAAZ,GAAuB,IAAvB;AACA,SAAKC,IAAL,GAAY,IAAIL,IAAJ,EAAZ;AACA,WAAO,IAAP;AACH;;AAED,QAAMM,wBAAN,CAA+BC,WAA/B,EAA2C;AACvC,UAAMC,QAAQ,GAAG,MAAM,KAAKH,IAAL,CAAUI,GAAV,CAAc,2CAA2CF,WAAW,CAACG,EAArE,CAAvB;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAlB;AACA,UAAMM,KAAK,GAAG,EAAd;;AACA,SAAK,MAAMC,CAAX,IAAgBJ,SAAhB,EAA2B;AACvBG,MAAAA,KAAK,CAACE,IAAN,CAAW,IAAIf,QAAJ,CAAaU,SAAS,CAACI,CAAD,CAAtB,CAAX;AACH;;AACD,WAAOD,KAAP;AACH;;AAlB4B","sourcesContent":["import Dbal from \"./dbal\";\r\nimport Obstacle from \"../metier/Obstacle\";\r\n\r\nexport default class DaoObstacle {\r\n    constructor() {\r\n        if (!!DaoObstacle.instance) {\r\n            return DaoObstacle.instance;\r\n        }\r\n        DaoObstacle.instance = this;\r\n        this.dbal = new Dbal();\r\n        return this;\r\n    }\r\n\r\n    async getObstacleByReservation(reservation){\r\n        const response = await this.dbal.get(\"/api/obstacle/obstacleByIdReservation/\" + reservation.id);\r\n        const obstacles = JSON.parse(response);\r\n        const liste = [];\r\n        for (const i in obstacles) {\r\n            liste.push(new Obstacle(obstacles[i]));\r\n        }\r\n        return liste;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}