{"ast":null,"code":"export default class Dbal {\n  /**\r\n   * Singleton\r\n   * @returns {Dbal}\r\n   */\n  constructor() {\n    if (!!Dbal.instance) {\n      return Dbal.instance;\n    }\n    /**@type Dbal**/\n\n\n    Dbal.instance = this;\n    /**@type string**/\n\n    this.ip = this.readIp();\n    /**@type Promise<string>**/\n\n    this.token = this.load();\n    return this;\n  }\n\n  readIp() {\n    const config = require('../config.json');\n\n    return config.bdd;\n  }\n  /**\r\n   * Récupère le token d'authorisation pour accéder à l'API\r\n   * @returns {Promise<string>}\r\n   */\n\n\n  async load() {\n    const username = window.prompt(\"username : \");\n    const mdp = window.prompt(\"mot de passe : \");\n    return await this.post(\"/api/login_check\", {\n      \"username\": username,\n      \"password\": mdp\n    });\n  }\n  /**\r\n   * Métode get\r\n   * @param url {string}\r\n   * @returns {Promise<string>}\r\n   */\n\n\n  async get(url) {\n    url = \"http://\" + this.ip + url;\n    let token = await this.token;\n    token = JSON.parse(token).token;\n    return new Promise((resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('GET', url, true);\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      xhr.send();\n    });\n  }\n  /**\r\n   * Méthode put\r\n   * @param url {string}\r\n   * @param params {string||object}\r\n   * @returns {Promise<string>}\r\n   */\n\n\n  async put(url, params) {\n    url = \"http://\" + this.ip + url;\n    let token = await this.token;\n    token = JSON.parse(token).token;\n    return new Promise((resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('PUT', url, true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      xhr.send(params);\n    });\n  }\n  /**\r\n   * Méthode post\r\n   * @param url {string}\r\n   * @param objet {string}\r\n   * @returns {Promise<string>}\r\n   */\n\n\n  post(url, objet) {\n    url = \"http://\" + this.ip + url;\n    return new Promise(async (resolve, reject) => {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 201 || xhr.status === 200) {\n            resolve(xhr.responseText);\n          } else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.open('POST', url, true);\n\n      if (this.token !== undefined) {\n        let token = await this.token;\n        token = JSON.parse(token).token;\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      }\n\n      if (objet) {\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        if (typeof objet === \"object\") {\n          xhr.send(JSON.stringify(objet));\n        } else {\n          xhr.send(objet);\n        }\n      } else {\n        xhr.send();\n      }\n    });\n  }\n  /**\r\n   * Transforme une date au format YYYY-MM-DD\r\n   * @param date\r\n   * @returns {string}\r\n   */\n\n\n  date2amd(date) {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    };\n    date = date.toLocaleDateString('fr-FR', options);\n    const val = date.split(\"/\");\n    date = val[2] + \"-\" + val[1] + \"-\" + val[0];\n    return date;\n  }\n\n} //============== A R CH I V E S ==================\n\n/**\r\n *fetch(\"http://localhost:8080/api/clients\")\r\n    .then(res => res.json())\r\n    .then(\r\n        async (result) => {\r\n        const create = result.map((c)=> {\r\n        clients.push(new client(c));\r\n        });\r\n        return await Promise.all(create);\r\n    },\r\n    (error) => {console.log(error);}\r\n );\r\n **/","map":{"version":3,"sources":["C:/xampp/htdocs/DeuxiemeSituation/backend/src/modele/Dbal.js"],"names":["Dbal","constructor","instance","ip","readIp","token","load","config","require","bdd","username","window","prompt","mdp","post","get","url","JSON","parse","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","setRequestHeader","send","put","params","objet","undefined","stringify","date2amd","date","options","year","month","day","toLocaleDateString","val","split"],"mappings":"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","sourcesContent":["export default class Dbal {\r\n    /**\r\n     * Singleton\r\n     * @returns {Dbal}\r\n     */\r\n    constructor() {\r\n        if (!!Dbal.instance) {\r\n            return Dbal.instance;\r\n        }\r\n        /**@type Dbal**/\r\n        Dbal.instance = this;\r\n        /**@type string**/\r\n        this.ip = this.readIp();\r\n        /**@type Promise<string>**/\r\n        this.token = this.load();\r\n        return this;\r\n    }\r\n\r\n\r\n    readIp(){\r\n        const config = require('../config.json');\r\n        return config.bdd;\r\n    }\r\n\r\n    /**\r\n     * Récupère le token d'authorisation pour accéder à l'API\r\n     * @returns {Promise<string>}\r\n     */\r\n    async load(){\r\n        const username = window.prompt(\"username : \");\r\n        const mdp = window.prompt(\"mot de passe : \");\r\n        return await this.post(\"/api/login_check\", {\"username\": username,\"password\":mdp});\r\n    }\r\n\r\n    /**\r\n     * Métode get\r\n     * @param url {string}\r\n     * @returns {Promise<string>}\r\n     */\r\n    async get(url){\r\n        url = \"http://\" + this.ip + url;\r\n        let token = await this.token;\r\n        token = JSON.parse(token).token;\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('GET', url, true);\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            xhr.send()\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Méthode put\r\n     * @param url {string}\r\n     * @param params {string||object}\r\n     * @returns {Promise<string>}\r\n     */\r\n    async put(url, params){\r\n        url = \"http://\" + this.ip + url;\r\n        let token = await this.token;\r\n        token = JSON.parse(token).token;\r\n        return new Promise((resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('PUT', url, true);\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            xhr.send(params)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Méthode post\r\n     * @param url {string}\r\n     * @param objet {string}\r\n     * @returns {Promise<string>}\r\n     */\r\n    post(url, objet){\r\n        url = \"http://\" + this.ip + url;\r\n        return new Promise(async (resolve, reject)=>{\r\n            const xhr = new window.XMLHttpRequest();\r\n            xhr.onreadystatechange = ()=>{\r\n                if (xhr.readyState === 4){\r\n                    if (xhr.status === 201 || xhr.status === 200){\r\n                        resolve(xhr.responseText)\r\n                    } else{\r\n                        reject(xhr);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('POST', url, true);\r\n            if (this.token !== undefined){\r\n                let token = await this.token;\r\n                token = JSON.parse(token).token;\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            }\r\n            if (objet){\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n                if (typeof objet === \"object\"){xhr.send(JSON.stringify(objet))}\r\n                else {xhr.send(objet)}\r\n            }\r\n            else {xhr.send()}\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Transforme une date au format YYYY-MM-DD\r\n     * @param date\r\n     * @returns {string}\r\n     */\r\n    date2amd(date){\r\n        const options = {year: 'numeric', month: 'numeric', day: 'numeric' };\r\n        date = date.toLocaleDateString('fr-FR', options);\r\n        const val = date.split(\"/\");\r\n        date = val[2] + \"-\" + val[1] + \"-\" + val[0];\r\n        return date;\r\n    }\r\n}\r\n\r\n//============== A R CH I V E S ==================\r\n/**\r\n *fetch(\"http://localhost:8080/api/clients\")\r\n    .then(res => res.json())\r\n    .then(\r\n        async (result) => {\r\n        const create = result.map((c)=> {\r\n        clients.push(new client(c));\r\n        });\r\n        return await Promise.all(create);\r\n    },\r\n    (error) => {console.log(error);}\r\n );\r\n **/"]},"metadata":{},"sourceType":"module"}